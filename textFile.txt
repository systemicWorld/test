init
git init is used to create a repository

status
git status tells us the state of our working directory

add
git add tells git to track specific files or folders
To stage certain changes with Path Mode, we use git add -p

Ignoring things
.gitignore files tell git what to completely ignore

Viewing the commit logs
git log - shows all of the commits that were made

git log --oneline
displays all the commits with just the comment from the commiter

diff
git diff <old commit> <new commit> gives the difference between two commits


Commits
We can commit selected chages by using git commit -p


Branches
Git branches are like different universes we can expirement in git branch shows all our branches
To create a new branch, use git branch <name>

Checkout
git checkout <branch name> switches to the branch.
Branches aren't automatically updated.
git checkout shifts the HEAD pointer around
We can visit older commit using git checkout [commit]

Merging
To merge changes from one branch into another, use git merge <branch name>
Conflicts occur if we make changes that git can't automatically combine
To fix a conflict, edit the file to be the way we want, then save and commit.

Undoing Things
To replace a single file with an older version, use git checkout [commit] [file]
To undo an entire commit, git revert [commit]

Reset
git reset can be used to undo commits: git reset [commit] --[mode]
In --hard mode, reset rolls back to the commmit and drops all changes since then